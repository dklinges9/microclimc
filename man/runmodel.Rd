% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/code.R
\name{runmodel}
\alias{runmodel}
\title{Runs the microclimate model over time}
\usage{
runmodel(climdata, vegp, soilp, lat, long, edgedist = 100, reqhgt = NA,
  sdepth = 2, zu = 2, theta = 0.3, merid = 0, dst = 0, n = 0.6,
  steps = 200, plotout = TRUE, plotsteps = 100, tsoil = NA,
  metopen = TRUE, windhgt = 2, zlafact = 1, surfwet = 1,
  previn = NA, snow = NA)
}
\arguments{
\item{climdata}{a data.frame of climate variables (see e.g. \code{weather})}

\item{vegp}{a list of vegetation parameters as returned by \code{\link[microctools:habitatvars]{microctools::habitatvars()}}}

\item{soilp}{a list of soil parameters as returned by \code{\link[=soilinit]{soilinit()}}}

\item{lat}{Latitude (decimal degrees)}

\item{long}{Longitude (decimal degrees, negative west of Greenwich meridion)}

\item{edgedist}{distance to open ground (m)}

\item{reqhgt}{optional height for which temperature is required (see details)}

\item{sdepth}{depth of deepest soil node (m)}

\item{zu}{height above ground of reference climate measurements (m)}

\item{theta}{a single numeric value, vector of values or matrix of volumetric water content
(m^3 / m^3) of soil layer(s) (see details)}

\item{merid}{an optional numeric value representing the longitude (decimal degrees) of the local time zone meridian (0 for GMT).}

\item{dst}{an optional numeric value representing the time difference from the timezone meridian (hours, e.g. +1 for BST if \code{merid} = 0).}

\item{n}{forward / backward weighting for Thomas algorithm (see \code{\link[=Thomas]{Thomas()}})}

\item{steps}{number of iterations over which to run \code{\link[=spinup]{spinup()}}}

\item{plotout}{optional logical indicating whether to a plot a profile of temperatures
upon completion.}

\item{plotsteps}{number of iterations run before resuls plotted if \code{plotout} set to TRUE}

\item{tsoil}{optional stable temperature of the deepest soil layer (see details)}

\item{metopen}{optional logical indicating whether the wind measurement used as an input to
the model is from a nearby weather station located in open ground (TRUE) or above the canopy
for which temperatures are modelled (FALSE - see details)}

\item{windhgt}{height above ground of wind measurement. If \code{metopen} is FALSE, must be above
canopy.}

\item{zlafact}{numeric value indicating how close to leaves air temperatures are
needed for (1 - average leaf-air distance, 0.5 = half average leaf-air distance etc.).
Must be greater than 1.}

\item{surfwet}{fraction of vegetation surface acting like free-water surface}

\item{previn}{optional initial conditions as returned by \code{\link[=runonestep]{runonestep()}}. If \code{NA} \code{\link[=spinup]{spinup()}} is
evoked.}

\item{snow}{optional vector indicating whether snow is present in each hour (1 = yes, 0 = no).
if \code{NA} snow is assumed not present.}
}
\value{
if \code{reqhgt} not \code{all} or \code{allclim} a data.frame with the following elements:

\code{obs_time} POSIXlt object of times associated wiht eahc output

\code{reftemp} air temperature (deg C) at reference height - i.e. \code{climdata$temp}

\code{tout} air or soil temperature (deg C) (see details)

\code{tleaf} Leaf temperature (deg C) (see details)

\code{relhum} Relative humidity (Percentage) (see details)

\code{SWin} Incoming shortwave radiation (W / m^2) (see details)

\code{LWin} Incoming longwave radiation (W / m^2) (see details)

\code{H} Total sensible heat flux to/from canopy (W / m^2). Positive values indicate
sensible heat release from canopy to air.

\code{L} Sensible heat flux (W / m^2) from each canopy node or for the entire canopy (see details)

\code{G} Total heat flux to/from  ground (W / m^2). Positive values indicate
flux from canopy to ground. Negative values indicate flux from ground to canopy.

if \code{reqhgt} = \code{allclim} a list of the following data.frames:

\code{Airtemp} air temperatures (deg C) at each node for each time step. Also air temperature at canopy
top and \code{psi_m} parameter, permitting interpolation of temperatures above canopy.

\code{Leaftemp} leaf temperatures (deg C) at each node for time step

\code{Soiltemp} temperatures (deg C) of each soil layer in time step

\code{Windspeed} wind speed (m/s) at each node for each time step

\code{Relhum} relative humidity (percentage) at each node for each time step

if \code{reqhgt} = \code{all}, additionally the following data.frames:

\code{Conductivity} leaf boundary layer, turbulent, and leaf vapour conductivities for each
time step (mol / m^2 / s)

\code{Fluxes} For each timestep, incoming long and shortwave radiation and
latent heat fluxes for each node. Also sensible and ground heat fluxes.
}
\description{
\code{runmodel} is used to run the full model over time
}
\details{
If \code{reqhgt} is set to a numeric value, and below the height of the canopy, the canopy node nearest
to that height is set at the value specified. The returned values \code{tout}, \code{tleaf}, \code{relhum},
\code{L} and \code{Swin} and \code{Lwin} are then the values at that height. If \code{reqhgt} is above canopy, nodes are
calculated automatically, and \code{tout} and \code{relhum} are the temperature and relative humidity
at height \code{reqhgt}, \code{SWin} and \code{LWin} the values above canopy, \code{tleaf} the mean leaf
temperature and \code{L} the summed latent heat exchange for the entire canopy. If \code{reqhgt} is
negative, the soil node nearest to that height is set at the value specified, \code{tout} is
soil temperature at that node, \code{tleaf}, \code{relhum}, \code{Swin} and \code{Lwin} are the mean values for
the whole canopy. If \code{reqhgt} is not set, \code{tout}, \code{tleaf}, \code{relhum}, \code{SWin}
and \code{LWin} are mean values for the whole canopy. The parameter \code{tsoil} is the temperature
of soil below \code{sdepth}, which is assumed constant. If \code{tsoil} is not provided, it is
assigned a value equivelent to mean of \code{climdata$temp}. If \code{reqhgt} is set to \code{allclim} a list
of data.frames is returned, giving temperatures, humidities and wind speeds at each node. If
If \code{reqhgt} is set to \code{all} data.frames of fluxes and conductivities are also returned.

If \code{theta} is a single numeric value, constant soil moisture in each soil layer and
in each time step is assumed. If \code{theta} is a vector of values of length number of soil
layers, time-invariant soilmoisture is assumed, but soil moisture is assumed to vary with
depth. If \code{theta} is a vector of values of length equivelent to the number of time steps
over which the model is to be run, then time-variant soilmoisture is assumed, but soil moisture
is assumed not to vary with depth. If \code{theta} is a matrix, the number of rows should be
equivelent to the number of soil layers, and the number of columns should be equivelent to
the number of time increments over which the model is to be run.

The wind profile of the canopy depends on the nature of the canopy itself, and often
available wind measurements are for a nearby weather station located in open ground where
it is possible that the height of the wind measurement is below the height of the canopy
being studied. When \code{metopen} is TRUE, the wind profile of reference grass surface is
used to derive estimates for two metres above the canopy of interest. When \code{metopen} is
FALSE, \code{windhgt} must be above canopy and the profile above the canopy being studied is used.
}
\examples{
tme<-as.POSIXlt(weather$obs_time, format = "\%Y-\%m-\%d \%H:\%M", tz = "UTC")
vegp <- microctools::habitatvars(4, lat = 50, long = -5, tme, m = 20)
soilp<- soilinit("Loam")
dataout <- runmodel(weather, vegp, soilp, lat = 50, long = -5)
par(mfrow=c(2,1))
plot(tout~as.POSIXct(obs_time), data = dataout, type = "l", col = "red",
     xlab = "Month", ylab = "Temperature", ylim = c(-8.5, 27.5))
par(new=TRUE)
plot(reftemp~as.POSIXct(obs_time), data = dataout, type = "l", col = rgb(0,0,0,0.5),
     xlab = "", ylab = "Temperature", ylim = c(-8.5, 27.5), main = "Air temperature")
plot(tleaf~as.POSIXct(obs_time), data = dataout, type = "l", col = "darkgreen",
     xlab = "Month", ylab = "Temperature", ylim = c(-8.5, 27.5))
par(new=TRUE)
plot(reftemp~as.POSIXct(obs_time), data = dataout, type = "l", col = rgb(0,0,0,0.5),
    xlab = "", ylab = "", ylim = c(-8.5, 27.5), main = "Leaf temperature")
}
